# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- master
variables:
- group: common
stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs:
      - job: 'Build01'
        displayName: 'Pack webapp files'
        variables:
          artifactFolder: '$(Build.ArtifactStagingDirectory)/artifact'
        steps:
        - task: CopyFiles@2
          displayName: 'Copy source code files to: $(Build.artifactstagingdirectory)'
          inputs:
            SourceFolder: '$(Build.sourcesdirectory)'
            Contents: |
              **/*.php
              **/*.css
            TargetFolder: '$(Build.artifactstagingdirectory)'
        - task: ArchiveFiles@2
          displayName: 'Archive source code as: webApp.zip'
          inputs:
            rootFolderOrFile: '$(Build.artifactstagingdirectory)/code'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(artifactFolder)/webApp.zip'
            replaceExistingArchive: true
        - task: PowerShell@2
          displayName: 'Create config file for zip deployment'
          inputs:
            targetType: 'inline'
            script: |
              New-Item $(artifactFolder)/packagename.txt
              Set-Content $(artifactFolder)/packagename.txt 'webApp.zip'
        - task: CopyFiles@2
          displayName: 'Copy sql and ansible files to: $(artifactFolder)'
          inputs:
            SourceFolder: '$(Build.sourcesdirectory)'
            Contents: |
              sql/users.sql
              ansible/playbook.yml
            flattenFolders: true
            TargetFolder: '$(artifactFolder)'
        - task: ArchiveFiles@2
          displayName: 'Archive artifact files as: artifact$(Build.BuildId).zip'
          inputs:
            rootFolderOrFile: '$(artifactFolder)'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/artifact$(Build.BuildId).zip'
            replaceExistingArchive: true
        - task: PublishBuildArtifacts@1
          displayName: 'Publish artifact$(Build.BuildId).zip'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/artifact$(Build.BuildId).zip'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: 'Dev'
    displayName: 'Deploy the web application to dev server'
    dependsOn: Build
    jobs:
    - template: deploy-stage-template.yml
      parameters:
        TargetEnvironment: 'dev'
  - stage: 'Preprod'
    displayName: 'Deploy the web application to preprod server'
    dependsOn: Dev
    jobs:
    - template: deploy-stage-template.yml
      parameters:
        TargetEnvironment: 'preprod'